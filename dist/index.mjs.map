{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/useTimer.ts","../src/timerFactory.ts","../src/useInterval.ts","../src/useTimeout.ts"],"sourcesContent":["export const isNotUserDefinedId = (arg: any): boolean =>\n  typeof arg !== 'string';\n\nlet isNotProductionEnv: boolean;\n\n// if (typeof __DEV__ !== 'undefined') {\n//   // for react native\n//   isNotProductionEnv = __DEV__;\n// } else\nif (typeof (import.meta as any).env !== 'undefined') {\n  isNotProductionEnv = (import.meta as any).env.MODE !== 'production';\n} else {\n  isNotProductionEnv = process.env.NODE_ENV !== 'production';\n}\n\nexport const throwDevWaring = (msg: string) => {\n  isNotProductionEnv &&\n    console.warn(msg + '\\nThis is a development only warning.');\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useRef, useEffect, useCallback, useMemo } from 'react';\nimport { isNotUserDefinedId, throwDevWaring } from './utils';\nimport {\n  VoidFn,\n  UserDefinedId,\n  ID,\n  TimerMetadata,\n  UseTimer,\n  TimerFn,\n  ClearTimer,\n  TimerConfig,\n} from './types';\nimport { timerFactory } from './timerFactory';\n\nexport const useTimer = (\n  timerFn: TimerFn,\n  clearTimer: ClearTimer,\n  type: 'Timeout' | 'Interval'\n) => {\n  const timers = useRef<Map<ID, TimerMetadata>>(new Map()).current;\n  const createTimer = useMemo(() => timerFactory(timerFn, clearTimer), []);\n\n  const setCustomTimer = useCallback(\n    (cb: VoidFn, delay: number, param3?: UserDefinedId | TimerConfig) => {\n      const isConfigProvided = typeof param3 === 'object';\n      const { clear, id, reset } = createTimer(\n        cb,\n        delay,\n        isConfigProvided ? param3 : undefined\n      );\n      const userDefinedId = isConfigProvided ? param3.key : param3;\n\n      timers.set(id, {\n        userDefinedId,\n        clear: clear,\n        reset: reset,\n      });\n\n      const _clear = () => {\n        const latestClearFn = timers.get(id)?.clear;\n        if (!latestClearFn) {\n          throwDevWaring(type + \" doesn't exist\");\n          return;\n        }\n        latestClearFn();\n        timers.delete(id);\n      };\n\n      const _reset = () => {\n        const latestResetFn = timers.get(id)?.reset;\n        if (!latestResetFn) {\n          throwDevWaring(type + \" doesn't exist\");\n          return;\n        }\n        const { clear: newClear, reset: newReset } = latestResetFn();\n        timers.set(id, {\n          userDefinedId,\n          clear: newClear,\n          reset: newReset,\n        });\n      };\n\n      return {\n        clear: _clear,\n        reset: _reset,\n        id,\n      };\n    },\n    []\n  );\n\n  const clearCustomTimer = useCallback(\n    (timeoutToClear: UserDefinedId | UseTimer) => {\n      if (isNotUserDefinedId(timeoutToClear)) {\n        (timeoutToClear as UseTimer).clear();\n        return;\n      }\n\n      for (const [, { clear, userDefinedId }] of timers) {\n        if (userDefinedId === timeoutToClear) {\n          clear();\n          break;\n        }\n      }\n    },\n    []\n  );\n\n  const clearAllTimers = useCallback(\n    () => timers.forEach(({ clear }) => clear()),\n    []\n  );\n\n  useEffect(() => clearAllTimers, []);\n\n  return {\n    setCustomTimer,\n    clearCustomTimer,\n    clearAllTimers,\n  };\n};\n","import { ClearTimer, CreateTimer, TimerConfig, TimerFn, VoidFn } from './types';\n\nexport function timerFactory(timerFn: TimerFn, clearTimer: ClearTimer) {\n  const _createTimer = (\n    cb: VoidFn,\n    delay: number,\n    id: symbol,\n    onClear: VoidFn | undefined,\n    onReset: VoidFn | undefined\n  ): CreateTimer => {\n    const jsId = timerFn(cb, delay);\n    const clear = () => {\n      clearTimer(jsId);\n      onClear?.();\n    };\n    const reset = () => {\n      clearTimer(jsId);\n      const newTimer = _createTimer(cb, delay, id, onClear, onReset);\n      onReset?.();\n      return newTimer;\n    };\n    return {\n      clear,\n      reset,\n      id,\n    };\n  };\n\n  const createTimer = (cb: VoidFn, delay: number, config?: TimerConfig) => {\n    const id = Symbol();\n    return _createTimer(cb, delay, id, config?.onClear, config?.onReset);\n  };\n\n  return createTimer;\n}\n","import { useTimer } from './useTimer';\n\nexport const useInterval = () => {\n  const { setCustomTimer, clearAllTimers, clearCustomTimer } = useTimer(\n    setInterval,\n    clearInterval,\n    'Interval'\n  );\n\n  return {\n    setInterval: setCustomTimer,\n    clearInterval: clearCustomTimer,\n    clearAllIntervals: clearAllTimers,\n  };\n};\n\nexport type SetIntervalFn = UseInterval['setInterval'];\nexport type ClearIntervalFn = UseInterval['clearInterval'];\nexport type ClearAllIntervalsFn = UseInterval['clearAllIntervals'];\n\nexport type SetInterval = ReturnType<SetIntervalFn>;\n\nexport type UseInterval = ReturnType<typeof useInterval>;\n","import { useTimer } from './useTimer';\n\nexport const useTimeout = () => {\n  const { setCustomTimer, clearAllTimers, clearCustomTimer } = useTimer(\n    setTimeout,\n    clearTimeout,\n    'Timeout'\n  );\n\n  return {\n    setTimeout: setCustomTimer,\n    clearTimeout: clearCustomTimer,\n    clearAllTimeouts: clearAllTimers,\n  };\n};\n\nexport type SetTimeoutFn = UseTimeout['setTimeout'];\nexport type ClearTimeoutFn = UseTimeout['clearTimeout'];\nexport type ClearAllTimeoutsFn = UseTimeout['clearAllTimeouts'];\n\nexport type SetTimeout = ReturnType<SetTimeoutFn>;\n\nexport type UseTimeout = ReturnType<typeof useTimeout>;\n"],"names":["isNotProductionEnv","env","MODE","process","NODE_ENV","throwDevWaring","msg","console","warn","useTimer","timerFn","clearTimer","type","timers","useRef","Map","current","createTimer","useMemo","_createTimer","cb","delay","id","onClear","onReset","jsId","clear","reset","newTimer","config","Symbol","timerFactory","setCustomTimer","useCallback","param3","isConfigProvided","undefined","userDefinedId","key","set","_clear","_timers$get","latestClearFn","get","delete","_reset","_timers$get2","latestResetFn","newClear","newReset","clearCustomTimer","timeoutToClear","clearAllTimers","forEach","useEffect","useInterval","setInterval","clearInterval","clearAllIntervals","useTimeout","setTimeout","clearTimeout","clearAllTimeouts"],"mappings":"4EAGA,IAAIA,EAOFA,OADsC,gBAARC,IACyB,2BAAbA,IAAIC,KAEA,eAAzBC,QAAQF,IAAIG,SAGtB,MAAAC,EAAkBC,IAC7BN,GACEO,QAAQC,KAAKF,EAAM,0CCFVG,EAAWA,CACtBC,EACAC,EACAC,KAEA,MAAMC,EAASC,EAA+B,IAAIC,KAAOC,QACnDC,EAAcC,EAAQ,ICnBd,SAAaR,EAAkBC,GAC7C,MAAMQ,EAAeA,CACnBC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAOf,EAAQU,EAAIC,GAWzB,MAAO,CACLK,MAXYA,KACZf,EAAWc,GACJ,MAAPF,GAAAA,KAUAI,MARYA,KACZhB,EAAWc,GACX,MAAMG,EAAWT,EAAaC,EAAIC,EAAOC,EAAIC,EAASC,GAEtD,OADO,MAAPA,GAAAA,IACOI,GAKPN,OASJ,MALoBL,CAACG,EAAYC,EAAeQ,KAC9C,MAAMP,EAAKQ,SACX,OAAOX,EAAaC,EAAIC,EAAOC,EAAIO,MAAAA,OAAAA,EAAAA,EAAQN,QAAe,MAANM,OAAM,EAANA,EAAQL,QAAO,CAIvE,CDboCO,CAAarB,EAASC,GAAa,IAE/DqB,EAAiBC,EACrB,CAACb,EAAYC,EAAea,KAC1B,MAAMC,EAAqC,iBAAXD,GAC1BR,MAAEA,EAAKJ,GAAEA,EAAEK,MAAEA,GAAUV,EAC3BG,EACAC,EACAc,EAAmBD,OAASE,GAExBC,EAAgBF,EAAmBD,EAAOI,IAAMJ,EAgCtD,OA9BArB,EAAO0B,IAAIjB,EAAI,CACbe,gBACAX,MAAOA,EACPC,MAAOA,IA2BF,CACLD,MAzBac,SAAKC,EAClB,MAAMC,SAAaD,EAAG5B,EAAO8B,IAAIrB,WAAXmB,EAAgBf,MACjCgB,GAILA,IACA7B,EAAO+B,OAAOtB,IAJZjB,EAAeO,EAAO,iBAIR,EAmBhBe,MAhBakB,SAAKC,EAClB,MAAMC,SAAaD,EAAGjC,EAAO8B,IAAIrB,WAAXwB,EAAgBnB,MACtC,IAAKoB,EAEH,YADA1C,EAAeO,EAAO,kBAGxB,MAAQc,MAAOsB,EAAUrB,MAAOsB,GAAaF,IAC7ClC,EAAO0B,IAAIjB,EAAI,CACbe,gBACAX,MAAOsB,EACPrB,MAAOsB,GACR,EAMD3B,OAGJ,IAGI4B,EAAmBjB,EACtBkB,IACC,GDzEW,iBCyEYA,GAKvB,IAAK,MAAM,EAAGzB,MAAEA,EAAKW,cAAEA,MAAoBxB,EACzC,GAAIwB,IAAkBc,EAAgB,CACpCzB,IACA,KACD,OARAyB,EAA4BzB,OAS9B,EAEH,IAGI0B,EAAiBnB,EACrB,IAAMpB,EAAOwC,QAAQ,EAAG3B,WAAYA,KACpC,IAKF,OAFA4B,EAAU,IAAMF,EAAgB,IAEzB,CACLpB,iBACAkB,mBACAE,mBEjGSG,EAAcA,KACzB,MAAMvB,eAAEA,EAAcoB,eAAEA,EAAcF,iBAAEA,GAAqBzC,EAC3D+C,YACAC,cACA,YAGF,MAAO,CACLD,YAAaxB,EACbyB,cAAeP,EACfQ,kBAAmBN,ICVVO,EAAaA,KACxB,MAAM3B,eAAEA,EAAcoB,eAAEA,EAAcF,iBAAEA,GAAqBzC,EAC3DmD,WACAC,aACA,WAGF,MAAO,CACLD,WAAY5B,EACZ6B,aAAcX,EACdY,iBAAkBV"}